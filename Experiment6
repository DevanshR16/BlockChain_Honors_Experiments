/* In this experiment we shall be creating a contract to simulate transactions
  between two accounts. Execute this file on remix IDE and share the contract ABI as proof!*/
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract TokenTransaction {
    mapping(address => uint256) public balances;

    event TokensTransferred(address indexed from, address indexed to, uint256 amount);

    constructor() {
        balances[msg.sender] = 100; // Assign 100 tokens to the contract deployer
    }

    function transferTokens(address to, uint256 amount) public {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        
        balances[msg.sender] -= amount;
        balances[to] += amount;

        emit TokensTransferred(msg.sender, to, amount);
    }
}
/* Note this is a boiler plate code customize as you wish */

/* this is a second optional code */
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract test{
    string public tokenname="TestToken";
    string public token="TT";
    uint8 public decimals = 18;
    uint256 public totalSupply;

    mapping(address => uint256) public balanceOf;
    mapping(address => mapping(address => uint256)) public allowance;

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);

    constructor(uint256 initialSupply){
        totalSupply = initialSupply*10**uint256(decimals);
        balanceOf[msg.sender] = totalSupply;
    }

    function transfer(address to, uint256 value) public returns (bool) {
        require(to !=address(0), "Invalid Address");
        require(balanceOf[msg.sender] >= value, "Insufficient Balance");

        balanceOf[msg.sender] -= value;
        balanceOf[to] += value;

        emit Transfer(msg.sender, to, value);
        return true;
    }

    function approve(address spender, uint256 value) public returns (bool){
        allowance[msg.sender][spender] = value;
        emit Approval(msg.sender, spender, value);
        return true;
    }

        function transferFrom(address from, address to, uint256 value) public returns (bool) {
        require(from != address(0), "Invalid address");
        require(to != address(0), "Invalid address");
        require(balanceOf[from] >= value, "Insufficient balance");
        require(allowance[from][msg.sender] >= value, "Allowance exceeded");
        
        balanceOf[from] -= value;
        balanceOf[to] += value;
        allowance[from][msg.sender] -= value;
        
        emit Transfer(from, to, value);
        return true;
    }
}
