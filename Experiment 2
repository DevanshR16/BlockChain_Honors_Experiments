//_______EXPT2_____
//__Aim: To install geth (the Go Ethereum client) on a Windows system
//__Note: In this experiment either install geth or truffle
//__Follow these steps:
Prerequisites:
Before installing Truffle, make sure you have the following prerequisites installed on your system:

    Node.js and npm (Node Package Manager): Truffle is built with Node.js, so you'll need to have it installed on your system. You can download Node.js from the official website: Node.js.

Install Truffle:
Open your command-line interface (CLI) and install Truffle globally using npm. Run the following command:

bash

npm install -g truffle

The -g flag installs Truffle globally on your system.

Verify Installation:
After installation, you can verify if Truffle is installed correctly by running:

bash

truffle version

This command should display the Truffle version installed on your system.

Ganache (Optional):
Although not necessary, it's highly recommended to install Ganache, a local Ethereum blockchain, to develop and test your smart contracts.
You can download Ganache from the official website: Ganache.

    Install Ganache and run a local Ethereum blockchain environment.

Create a Project:
To start a new Truffle project, navigate to the directory where you want to create your project and run:

bash

truffle init

This command will create a basic Truffle project structure with example contracts, migrations, and configuration files.

Customize Configuration (Optional):
Edit the truffle-config.js file to configure network settings, such as connecting to your local Ganache blockchain, or specifying other Ethereum networks.

Write Smart Contracts:
In the contracts directory of your project, create or add your own Solidity smart contracts.

Migrate Contracts:
To deploy your contracts, run migrations using the following command:

bash

truffle migrate

You can specify a network by using the --network flag, e.g., --network development.

Test Contracts:
Write tests for your smart contracts in the test directory and use the following command to run tests:

bash

truffle test

Interact with Contracts:
You can interact with your deployed contracts using Truffle's console. Run:

bash

    truffle console

You'll have access to your contracts and the web3.js library for Ethereum interactions.
Now you have a basic Truffle environment set up on your local system, and you can start
developing, testing, and deploying Ethereum smart contracts. Remember to refer to the
official Truffle documentation for more detailed information and advanced usage: Truffle Documentation.
